#!/usr/bin/env ruby
# frozen_string_literal: true

def find_paths(params, extension = nil)
  return [] if params.blank?

  params.map do |arg|
    next arg if File.file?(arg)

    next unless Dir.exist?(arg)

    Find.find(arg).map do |path|
      next if File.directory?(path)
      next if extension.present? && File.extname(path) != extension
      path
    end
  end.flatten.compact
end

$stdout.sync = true # flush output immediately

puts "Loading environment..."
require File.expand_path("../../config/environment", __FILE__)
puts "Running in #{Rails.env} mode..."

# If there are no options given, invoke help
ARGV << "-h" if ARGV.empty?

options = Trollop.options do
  banner <<~EOS

    Command line object ingest for the UCSB Alexandria Digital Library

    Example:
          RAILS_ENV=development ./bin/ingest -f csv -m /data/mss292.csv -d /data/mss292-objects/ -v
    Usage:
          RAILS_ENV=[development|test|production] ./bin/ingest [options]
    where [options] are:

EOS

  opt :data, "Data file(s)/directory", type: :strings
  opt :format, "Metadata format (csv, mods, etd, cyl)", type: :string
  opt :metadata, "Metadata file(s)/directory", type: :strings
  opt :number, "Only ingest N records", type: :integer
  opt :skip, "Skip the first N records", default: 0
  opt :verbose, "Provide additional output", default: false
  opt :logfile, "/full/path/to/logfile.log (CSV imports only)", type: :string
  opt :loglevel,
      "Log level: DEBUG,INFO,WARN or ERROR (CSV imports only)",
      type: :string,
      default: "DEBUG",
      short: "-g"
end

require File.expand_path("../../lib/importer", __FILE__)
AdminPolicy.ensure_admin_policy_exists

require "fileutils"
require "find"
require "json"
require "traject"

metadata_ext = case options[:format]
               when "csv"
                 ".csv"
               else
                 ".xml"
               end

# For each argument passed to --metadata, if it's a file with the
# correct extension, add it to the array, otherwise drill down and add
# each file within to the array
meta = find_paths(options[:metadata], metadata_ext)

data = if options[:format] == "cyl"
         # Just pass the options through, the {ObjectFactoryWriter}
         # currently does the path processing
         options[:data]
       else
         find_paths(options[:data])
       end

if data.empty?
  puts
  puts "\033[1;39mWarning: no data sources specified.\033[0m"
  puts
end

if options[:verbose]
  puts
  puts "Metadata inputs:"
  meta.each { |m| puts m }
  puts
  puts "Data inputs:"
  data.each { |d| puts d }
end

######################
# Begin ingest process
######################
start_overall = Time.zone.now
ingests = 0

puts "Import start time: #{start_overall.strftime("%Y-%m-%d %H:%M:%S")}"

begin
  case options[:format]
  when "csv"
    ingests = Importer::CSV.import(meta, data, options)
  when "mods"
    ingests = Importer::MODS.import(meta, data, options)
  when "etd"
    ingests = Importer::ETD.import(meta, data, options)
  when "cyl"
    begin
      importer = Importer::Cylinder.new(meta, data, options)
      importer.run
    rescue => e
      puts e
      puts e.backtrace
      raise IngestError,
            reached: options[:skip] + importer.imported_records_count
    ensure
      ingests = importer.imported_records_count
    end
  end # case/when

  end_overall = Time.zone.now

  puts "Ingested #{ingests} records in "\
       "#{(end_overall - start_overall) / 60} minutes"
rescue IngestError => e
  puts "To continue this ingest, re-run the command with "\
       "`--skip #{e.reached}`"
  exit 1
end
