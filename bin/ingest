#!/usr/bin/env ruby
# frozen_string_literal: true

$stdout.sync = true # flush output immediately

puts "Loading environment..."
require File.expand_path("../config/environment", __dir__)
puts "Running in #{Rails.env} mode..."
require File.expand_path("../lib/importer", __dir__)

# If there are no options given, invoke help
ARGV << "-h" if ARGV.empty?

options = Trollop.options do
  banner <<~EOS
    Command line object ingest for the UCSB Alexandria Digital Library

    Example:
          RAILS_ENV=development ./bin/ingest -f csv -m /data/mss292.csv -d /data/mss292-objects
    Usage:
          RAILS_ENV=[development|test|production] ./bin/ingest [options]
    where [options] are:

EOS

  opt :data, "Data file(s)/directory", type: :strings
  opt :format, "Metadata format (csv, mods, etd, cyl)", type: :string
  opt :metadata, "Metadata file(s)/directory", type: :strings
  opt :number, "Only ingest N records", type: :integer
  opt :skip, "Skip the first N records", default: 0
  opt :verbosity,
      "Log verbosity: DEBUG, INFO, WARN, ERROR",
      type: :string,
      default: "INFO",
      short: "-v"
end

FileUtils.mkdir_p Settings.log_dir
logfile = Pathname.new(Settings.log_dir).join(
  "#{options[:format]}-#{Time.zone.now.strftime("%Y-%m-%d_%H.%M.%S")}.log"
)

if Rails.application.config.active_job.queue_adapter == :resque
  pid = fork do
    Importer::CLI.run(options.merge(logfile: logfile))
  end

  puts "Ingesting in the background with PID #{pid}"
  puts "Logging to #{logfile}"

  Process.detach pid
else
  Importer::CLI.run(options.merge(logfile: $stdout))
end
